/* Generated by re2c 1.0.1 on Thu Apr 12 21:08:28 2018 */
#line 1 "integers.re"
#include <stdio.h>
#include "../common/common.h"

enum num_t 
{
    ERR, // 错误
    BIN, // 二进制
    OCT, // 八进制
    DEC, // 十进制
    HEX  // 十六进制
};

static num_t lex(const char *YYCURSOR)
{
    // YYMARKER (line 7) is needed because rules overlap:
    // it backs up the input position of the longest successful match.
    // Imagine we have overlapping rules "a" and "abc" and input string "abd": by the time "a" matches, there’s still a chance to match "abc", but when the lexer sees 'd', it must roll back.
    // (You might wonder why YYMARKER is exposed at all: why not make it a local variable like yych? The reason is, all input pointers must be updated by YYFILL as explained in the Large input example.)
    // 内置的指定名称，不能修改为其他名称。回溯用。
    const char *YYMARKER;

    
#line 26 "integers.cc"
{
	char yych;
	yych = *YYCURSOR;
	switch (yych) {
	case '0':	goto yy4;
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy5;
	default:	goto yy2;
	}
yy2:
	++YYCURSOR;
yy3:
#line 32 "integers.re"
	{ return ERR; }
#line 48 "integers.cc"
yy4:
	yych = *(YYMARKER = ++YYCURSOR);
	switch (yych) {
	case 0x00:	goto yy6;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':	goto yy8;
	case 'B':
	case 'b':	goto yy11;
	case 'X':
	case 'x':	goto yy12;
	default:	goto yy3;
	}
yy5:
	yych = *(YYMARKER = ++YYCURSOR);
	switch (yych) {
	case 0x00:	goto yy13;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy15;
	default:	goto yy3;
	}
yy6:
	++YYCURSOR;
#line 34 "integers.re"
	{ return OCT; }
#line 87 "integers.cc"
yy8:
	yych = *++YYCURSOR;
	switch (yych) {
	case 0x00:	goto yy6;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':	goto yy8;
	default:	goto yy10;
	}
yy10:
	YYCURSOR = YYMARKER;
	goto yy3;
yy11:
	yych = *++YYCURSOR;
	if (yych <= 0x00) goto yy10;
	goto yy18;
yy12:
	yych = *++YYCURSOR;
	if (yych <= 0x00) goto yy10;
	goto yy20;
yy13:
	++YYCURSOR;
#line 35 "integers.re"
	{ return DEC; }
#line 117 "integers.cc"
yy15:
	yych = *++YYCURSOR;
	switch (yych) {
	case 0x00:	goto yy13;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy15;
	default:	goto yy10;
	}
yy17:
	yych = *++YYCURSOR;
yy18:
	switch (yych) {
	case 0x00:	goto yy21;
	case '0':
	case '1':	goto yy17;
	default:	goto yy10;
	}
yy19:
	yych = *++YYCURSOR;
yy20:
	switch (yych) {
	case 0x00:	goto yy23;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy19;
	default:	goto yy10;
	}
yy21:
	++YYCURSOR;
#line 33 "integers.re"
	{ return BIN; }
#line 176 "integers.cc"
yy23:
	++YYCURSOR;
#line 36 "integers.re"
	{ return HEX; }
#line 181 "integers.cc"
}
#line 37 "integers.re"

}

int main(int argc, char **argv)
{
    for (int i = 1; i < argc; ++i) {
        switch (lex(argv[i])) {
            case ERR:
                printf("错误\n"); 
                break;
            case BIN:
                printf("二进制\n");
                break;
            case OCT:
                printf("八进制\n"); 
                break;
            case DEC:
                printf("十进制\n");
                break;
            case HEX:
                printf("十六进制\n");
                break;
        }
    }
    return 0;
}
